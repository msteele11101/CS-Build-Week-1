{"version":3,"sources":["components/cell.js","components/board.js","actions/index.js","components/button.js","components/control.js","components/counter.js","components/rules.js","components/history.js","components/learn.js","App.js","bin/grid.js","reducers/reducer_board.js","reducers/reducer_play_status.js","reducers/reducer_generation_counter.js","reducers/index.js","serviceWorker.js","index.js"],"names":["alive","newBorn","running","handleClick","onClick","className","Board","this","props","board","map","row","i","key","cell","j","status","currentState","Component","connect","dispatch","x","y","type","title","icon","Control","random","console","log","isRunning","clear","togglePlay","playState","tick","resizeSmall","resizeMedium","resizeLarge","clearInterval","timerId","stopPlaying","interval","setInterval","startPlaying","Counter","generations","counter","Rules","History","Learn","href","App","bool","setState","checkRunning","e","state","rel","makeGrid","height","width","makeRandom","grid","value","Math","push","advanceGrid","gridHeight","length","gridWidth","calculateNeighbours","topRow","bottomRow","leftColumn","rightColumn","total","gameState","cellIsAlive","neighbours","GRID_HEIGHT","GRID_WIDTH","initialGrid","initialState","action","rootReducer","combineReducers","slice","generationCounterReducer","Boolean","window","location","hostname","match","require","createStoreWithMiddleware","applyMiddleware","createStore","ReactDOM","render","store","reducers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a0d82f9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default ({alive, newBorn, running, handleClick}) =>\r\n(\r\n    <td\r\n        onClick={running ? '' : handleClick}\r\n        className={`${alive ? 'alive' : ''} ${newBorn ? 'new-born': ''}`}\r\n     \r\n    >\r\n    </td>\r\n  )","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { currentState } from '../actions/';\r\n\r\nimport Cell from './cell';\r\n\r\nclass Board extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"board\">\r\n        <table>\r\n          <tbody>\r\n            {this.props.board.map((row,i) =>\r\n              <tr key={i}>{row.map((cell, j) =>\r\n                <Cell\r\n                  key={j}\r\n                  alive={cell.status}\r\n                  newBorn={cell.newBorn}\r\n                  handleClick={() => this.props.currentState(i,j)}\r\n                  running={this.props.running}\r\n                />)}\r\n              </tr>)}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ board }) => {\r\n  return { board };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { currentState: (x,y) => dispatch(currentState(x,y)) }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","export function currentState(x,y) {\r\n    return {\r\n      type: 'TOGGLE_ALIVE',\r\n      x,\r\n      y\r\n    };\r\n  }\r\n  \r\n  export function makeRandomGrid() {\r\n    return {\r\n      type: 'MAKE_RANDOM'\r\n    };\r\n  }\r\n  \r\n  export function tick() {\r\n    return {\r\n      type: 'TICK'\r\n    };\r\n  }\r\n  \r\n  export function startPlaying(timerId) {\r\n    return {\r\n      type: 'PLAY',\r\n      timerId\r\n    };\r\n  }\r\n  \r\n  export function stopPlaying(timerId) {\r\n    return {\r\n      type: 'STOP',\r\n      timerId\r\n    };\r\n  }\r\n  \r\n  export function clear() {\r\n    return {\r\n      type: 'CLEAR',\r\n    };\r\n  }\r\n  \r\n  export function resizeSmall() {\r\n    return {\r\n      type: 'RESIZE_SMALL',\r\n    };\r\n  }\r\n  \r\n  export function resizeMedium() {\r\n    return {\r\n      type: 'RESIZE_MEDIUM',\r\n    };\r\n  }\r\n  \r\n  export function resizeLarge() {\r\n    return {\r\n      type: 'RESIZE_LARGE',\r\n    };\r\n  }","import React from 'react';\r\n\r\nexport default ({title, icon, handleClick}) => (\r\n  <span onClick={handleClick} className=\"button\">\r\n    <i className={icon}></i> {title}\r\n  </span>\r\n)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeRandomGrid, tick, startPlaying, stopPlaying, clear, resizeSmall, resizeMedium, resizeLarge } from '../actions/';\r\n\r\nimport Button from './button';\r\n\r\nclass Control extends Component {\r\n  componentDidMount(){\r\n    this.props.random();\r\n    console.log(this.props.isRunning);\r\n    // this.togglePlay();\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"controls\">\r\n        <div className=\"buttons\">\r\n          <Button\r\n            handleClick={() => this.props.random()}\r\n            title={'Randomize'}\r\n            icon={'fa fa-random'}\r\n          />\r\n          <Button\r\n            handleClick={() => this.clear()}\r\n            title={'Clear'}\r\n            icon={'fa fa-undo'}\r\n          />\r\n          <Button\r\n            handleClick={() => {\r\n            this.togglePlay()\r\n            this.props.running ? this.props.isRunning(false) : this.props.isRunning(true)\r\n            }}\r\n            icon={this.props.playState.isRunning ? 'fa fa-pause' : 'fa fa-play' }\r\n            title={this.props.playState.isRunning ? 'Pause' : 'Play'}\r\n          />\r\n          <Button\r\n            handleClick={() => this.props.tick()}\r\n            icon={'fa fa-step-forward'}\r\n            title={'Next Step'}\r\n          />\r\n          <br/><br/>\r\n          <div className=\"button-group\">\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeSmall()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Small'}\r\n            />\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeMedium()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Medium'}\r\n            />\r\n          <Button\r\n            className=\"button\"\r\n            handleClick={() => this.props.resizeLarge()}\r\n            icon={'fa fa-th-large'}\r\n            title={'Large'}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  togglePlay(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    } else {\r\n      let interval = setInterval(this.props.tick,100);\r\n      this.props.startPlaying(interval);\r\n    }\r\n  }\r\n  clear(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n      this.props.clear();\r\n  }\r\n  resizeSmall(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeSmall();\r\n  }\r\n  resizeMedium(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeMedium();\r\n  }\r\n  resizeLarge(){\r\n    if (this.props.playState.isRunning) {\r\n      clearInterval(this.props.playState.timerId);\r\n      this.props.stopPlaying();\r\n    }\r\n    this.props.resizeLarge();\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({playState}) => {\r\n  return { playState };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    random: () => dispatch(makeRandomGrid()),\r\n    tick: () => dispatch(tick()),\r\n    startPlaying: (timerId) => dispatch(startPlaying(timerId)),\r\n    stopPlaying: () => dispatch(stopPlaying()),\r\n    clear: () => dispatch(clear()),\r\n    resizeSmall: () => dispatch(resizeSmall()),\r\n    resizeMedium: () => dispatch(resizeMedium()),\r\n    resizeLarge: () => dispatch(resizeLarge())\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Control)","  \r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Counter extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"counter\">\r\n        Generations: {this.props.generations}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({counter}) => {\r\n  return { generations: counter }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Counter);","  \r\nimport React, { Component } from 'react';\r\n\r\nclass Rules extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"rules\">\r\n        <h3 className=\"infotext\">Rules</h3>\r\n        <p>\r\n          • Create an initial configuration or press the randomize button above to make a layout of the grid and watch how it evolves. ☢<br/>\r\n          • If the cell is alive and has 2 or 3 neighbors, then it remains alive. Else it dies. ☠<br/>\r\n          • If the cell is dead and has exactly 3 neighbors, then it comes to life. Else if remains dead.☠  \r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Rules;","import React, { Component } from 'react';\r\n\r\nclass History extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"history\">\r\n         <h3 className=\"infotext\">History</h3>\r\n         <p>\r\n          Cellular automata are programs that operate on data which is typically stored in a grid. ﭢ\r\n         </p>\r\n         <br/>\r\n         <p>\r\n          The Game of Life is a cellular automaton developed by John Horton Conway in 1970.™\r\n         </p>\r\n         <br/>\r\n         <p>\r\n           It is zero-player game, meaning that its evolution is determined by its intial state, requiring no furhter input. ✪\r\n         </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default History;\r\n","import React, { Component } from 'react';\r\n\r\nclass Learn extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"learn\">\r\n        Learn more info on John Conway's Game of Life click &nbsp;<a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">HERE</a>. \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Learn;\r\n","import React, { Component } from 'react';\nimport Board from './components/board';\nimport Control from './components/control';\nimport Counter from './components/counter';\nimport Rules from './components/rules';\nimport History from './components/history';\nimport Learn from './components/learn';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      running: false,\n    }\n  }\n\n  isRunning = (bool) => {\n    this.setState({\n      running: bool \n    })\n    console.log(bool);\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\"></link>\n          <h1>Game of Life</h1>\n          <div>\n            <Learn/>\n          </div>\n          <Board \n            running={this.state.running}\n          />\n          <Counter />\n          <Control \n            running={this.state.running}\n            isRunning={this.isRunning}\n          />\n        </div>\n        <div className=\"whitespace\"/>\n        <div className=\"info\">\n          <Rules />\n          <History />\n        </div>\n        <div className=\"footer-whitespace\"/>\n      </div>\n    );\n  }\n\n  checkRunning = (e) => {\n    e = this.state;\n  }\n}\n\nexport default App;\n","export const makeGrid = (height, width, makeRandom = false) => {\r\n    let grid = [];\r\n      for (var i = 0; i < height; i++){\r\n        var row = [];\r\n        for (var j = 0; j < width; j++){\r\n          let value;\r\n          if (makeRandom){\r\n            value = Math.random() > 0.85;\r\n          }\r\n          row.push({\r\n            status: value,\r\n            newBorn: value\r\n          });\r\n        }\r\n        grid.push(row);\r\n      }\r\n      return grid;\r\n  };\r\n  \r\n  export const advanceGrid = function(grid = []){\r\n       let gridHeight = grid.length;\r\n       let gridWidth = grid[0].length;\r\n  \r\n       let calculateNeighbours = function(x,y) {\r\n         let topRow = x-1 < 0 ? (gridHeight - 1) : x-1;\r\n         let bottomRow = (x+1 === gridHeight) ? 0 : x+1;\r\n         let leftColumn = y-1 < 0 ? (gridWidth - 1) : y-1;\r\n         let rightColumn = (y+1 === gridWidth) ? 0 : y+1;\r\n  \r\n         let total = 0;\r\n         total+= grid[topRow][leftColumn].status;\r\n         total+= grid[topRow][y].status;\r\n         total+= grid[topRow][rightColumn].status;\r\n         total+= grid[x][leftColumn].status;\r\n         total+= grid[x][rightColumn].status;\r\n         total+= grid[bottomRow][leftColumn].status;\r\n         total+= grid[bottomRow][y].status;\r\n         total+= grid[bottomRow][rightColumn].status;\r\n  \r\n         return total;\r\n       };\r\n       //apply the rules of the game by comparing \r\n       let gameState = [];\r\n       for (let i = 0; i < gridHeight; i++) {\r\n         let row = [];\r\n         for (let j = 0; j < gridWidth; j++) {\r\n           let cellIsAlive = grid[i][j].status;\r\n           let neighbours = calculateNeighbours(i,j);\r\n             if (cellIsAlive) {\r\n                  if (neighbours < 2) {\r\n                      row.push({ status: 0 });\r\n                  } else if (neighbours > 3){\r\n                      row.push({ status: 0 });\r\n                  } else {\r\n                      row.push({ status: 1 });\r\n                  }\r\n              }\r\n              if (!cellIsAlive) {\r\n                  if (neighbours === 3) {\r\n                  row.push({\r\n                    status: 1,\r\n                    newBorn: true\r\n                  });\r\n              } else {\r\n                  row.push({ status: 0 });\r\n                  }\r\n              }\r\n       }\r\n       gameState.push(row);\r\n     }\r\n     return gameState;\r\n   };","import * as grid from '../bin/grid';\r\n\r\nlet GRID_HEIGHT = 40;\r\nlet GRID_WIDTH = 40;\r\nconst initialGrid = grid.makeGrid(GRID_HEIGHT,GRID_WIDTH);\r\n\r\nexport default (state = initialGrid, action) => {\r\n  switch(action.type){\r\n    case 'TOGGLE_ALIVE':\r\n      let board = state.slice(0);\r\n      let cell = board[action.x][action.y];\r\n      cell.status = !cell.status;\r\n      cell.newBorn = !cell.newBorn;\r\n      return board;\r\n    case 'RESIZE_SMALL':\r\n      GRID_HEIGHT = 15;\r\n      GRID_WIDTH = 15;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'RESIZE_MEDIUM':\r\n      GRID_HEIGHT = 25;\r\n      GRID_WIDTH = 25;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'RESIZE_LARGE':\r\n      GRID_HEIGHT = 40;\r\n      GRID_WIDTH = 40;\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, false);\r\n    case 'MAKE_RANDOM':\r\n      //true param requests a random grid from makeGrid method\r\n      return grid.makeGrid(GRID_HEIGHT, GRID_WIDTH, true);\r\n    case 'CLEAR':\r\n      return grid.makeGrid(GRID_HEIGHT,GRID_WIDTH);\r\n    case 'TICK':\r\n      return grid.advanceGrid(state.slice(0));\r\n    default:\r\n      return state;\r\n  }\r\n};","  \r\nconst initialState = {\r\n    timerId: null,\r\n    isRunning: false\r\n  };\r\n  \r\n  export default (state = initialState, action) => {\r\n    switch(action.type){\r\n      case 'PLAY':\r\n        return {\r\n          timerId: action.timerId,\r\n          isRunning: true\r\n        };\r\n      case 'STOP':\r\n        return {\r\n          timerId: null,\r\n          isRunning: false\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };","const counter = (state = 0, action) => {\r\n    switch(action.type){\r\n      case 'TICK':\r\n        return state + 1;\r\n      case 'CLEAR':\r\n        return 0\r\n      case 'MAKE_RANDOM':\r\n        return 0\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default counter;","import { combineReducers } from 'redux';\r\n\r\nimport boardReducer from './reducer_board';\r\nimport playStatusReducer from './reducer_play_status';\r\nimport generationCounterReducer from './reducer_generation_counter';\r\n\r\nconst rootReducer = combineReducers({\r\n  board: boardReducer,\r\n  playState: playStatusReducer,\r\n  counter: generationCounterReducer,\r\n});\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport App from './App';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\nrequire('./style/index.css')\n\n\nconst createStoreWithMiddleware = applyMiddleware()(createStore);\n\nReactDOM.render(\n<Provider store={createStoreWithMiddleware(reducers)}>\n  <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}